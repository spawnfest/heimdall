<div class="border rounded-xl px-6 py-8">
  <div class="text-center text-xl mb-4">
    Create a New Secret
  </div>

  <div x-data="{selectedAlgo: 'aes_gcm'}">
    <.form for={@changeset} action={~p"/secrets"}>
      <div x-data="{ show: false, showInfo: false }">
        <div class="grid grid-cols-6">
          <div class="-mt-0.5">
            <.label for="encrypted_text">
              Secret
              <span
                class="text-blue-800 hover:text-blue-400 cursor-pointer"
                @mouseover="showInfo = true"
                @mouseleave="showInfo = false"
              >
                <.icon name="hero-information-circle" class="h-5 w-5" />
              </span>
            </.label>
          </div>

          <div
            x-show="showInfo"
            class="-mt-8 px-4 py-2 text-white bg-black absolute text-xs bg-opacity-80"
          >
            This is where you'll enter your sensitive information you want
            to share. Passwords, Member IDs etc
          </div>

          <div
            class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
            x-show="!show"
            @click="show = true"
          >
            <.icon name="hero-eye" class="h-5 w-5" />
          </div>

          <div
            class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
            x-show="show"
            @click="show = false"
          >
            <.icon name="hero-eye-slash" class="h-5 w-5" />
          </div>
        </div>

        <.input
          type="textarea"
          autocomplete="off"
          name="secret[encrypted_text]"
          id="secret_encrypted_text"
          spellcheck="false"
          value={@changeset.changes[:encrypted_text]}
          x-bind:style="!show && 'color: transparent;text-shadow: 0 0 8px rgba(0,0,0,0.5);'"
        />
      </div>

      <% filtered_errors =
        @changeset.errors
        |> Enum.filter(&(elem(&1, 0) == :encrypted_text))
        |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

      <.error :for={msg <- filtered_errors}><%= msg %></.error>

      <br />

      <hr />

      <br />

      <div x-data="{ showInfo: false }">
        <div class="grid grid-cols-6">
          <div class="mt-0.5">
            <.label for="title">
              Title
              <span
                class="text-blue-800 hover:text-blue-400 cursor-pointer"
                @mouseover="showInfo = true"
                @mouseleave="showInfo = false"
              >
                <.icon name="hero-information-circle" class="h-5 w-5" />
              </span>
            </.label>
          </div>

          <div
            x-show="showInfo"
            class="-mt-8 px-4 py-2 text-white bg-black absolute text-xs bg-opacity-80"
          >
            Enter a title so its easier to identity this secret
          </div>
        </div>
      </div>

      <.input
        name="secret[title]"
        id="secret_title"
        placeholder="Short description"
        value={@changeset.changes[:title]}
      />

      <% filtered_errors =
        @changeset.errors
        |> Enum.filter(&(elem(&1, 0) == :title))
        |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

      <.error :for={msg <- filtered_errors}><%= msg %></.error>

      <br />

      <.label for="encryption_algo">Encryption Algorithm</.label>

      <select
        id="secret_encryption_algo"
        name="secret[encryption_algo]"
        value={@changeset.changes[:encryption_algo]}
        class="mt-1 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm dark:bg-zinc-600"
        x-model="selectedAlgo"
      >
        <%= for encryption_algo <- Secret.encryption_algos() do %>
          <option
            id={ "secret_encryption_algo_#{encryption_algo}" }
            value={encryption_algo}
          >
            <%= humanize_encryption_algo(encryption_algo) %>
          </option>
        <% end %>
      </select>

      <% filtered_errors =
        @changeset.errors
        |> Enum.filter(&(elem(&1, 0) == :encryption_algo))
        |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

      <.error :for={msg <- filtered_errors}><%= msg %></.error>

      <br />

      <template x-if="selectedAlgo == 'aes_gcm'">
        <div x-data="{ show: false, showInfo: false }">
          <div class="grid grid-cols-6">
            <div class="mt-0.5">
              <.label for="encryption_key">
                Password
                <span
                  class="text-blue-800 hover:text-blue-400 cursor-pointer"
                  @mouseover="showInfo = true"
                  @mouseleave="showInfo = false"
                >
                  <.icon name="hero-information-circle" class="h-5 w-5" />
                </span>
              </.label>
            </div>

            <div
              x-show="showInfo"
              class="-mt-8 px-4 py-2 text-white bg-black absolute text-xs bg-opacity-80"
            >
              The receiver will require to know this password to view this secret
            </div>

            <div
              class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
              x-show="!show"
              @click="show = true"
            >
              <.icon name="hero-eye" class="h-5 w-5" />
            </div>

            <div
              class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
              x-show="show"
              @click="show = false"
            >
              <.icon name="hero-eye-slash" class="h-5 w-5" />
            </div>
          </div>

          <.input
            autocomplete="off"
            name="secret[encryption_key]"
            id="secret_encryption_key"
            spellcheck="false"
            value={@changeset.changes[:encryption_key]}
            x-bind:style="!show && 'color: transparent;text-shadow: 0 0 8px rgba(0,0,0,0.5);'"
          />

          <br />
        </div>
      </template>

      <template x-if="selectedAlgo == 'rsa'">
        <div x-data="{ show: false, showInfo: false }">
          <div class="grid grid-cols-4">
            <div class="mt-0.5">
              <.label for="encryption_key">
                RSA Public Key PEM
                <span
                  class="text-blue-800 hover:text-blue-400 cursor-pointer"
                  @mouseover="showInfo = true"
                  @mouseleave="showInfo = false"
                >
                  <.icon name="hero-information-circle" class="h-5 w-5" />
                </span>
              </.label>
            </div>

            <div
              x-show="showInfo"
              class="-mt-8 px-4 py-2 text-white bg-black absolute text-xs bg-opacity-80"
            >
              Use the receiver's RSA Public key to encrypt. They will need to use their private key to decrypt
            </div>

            <div
              class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
              x-show="!show"
              @click="show = true"
            >
              <.icon name="hero-eye" class="h-5 w-5" />
            </div>

            <div
              class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
              x-show="show"
              @click="show = false"
            >
              <.icon name="hero-eye-slash" class="h-5 w-5" />
            </div>
          </div>

          <.input
            type="textarea"
            autocomplete="off"
            name="secret[encryption_key]"
            id="secret_encryption_key"
            spellcheck="false"
            value={@changeset.changes[:encryption_key]}
            x-bind:style="!show && 'color: transparent;text-shadow: 0 0 8px rgba(0,0,0,0.5);'"
          />

          <br />
        </div>
      </template>

      <template x-if="selectedAlgo == 'plaintext'">
        <div class="hidden">
          <.input
            name="secret[encryption_key]"
            id="secret_encryption_key"
            value="plaintext"
          />
        </div>

        <br />
      </template>

      <.label for="expires_at">Expires in</.label>

      <select
        id="secret_expires_at"
        name="secret[expires_at]"
        value={@changeset.changes[:expires_at]}
        class="mt-1 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm dark:bg-zinc-600"
        x-model="selectedService"
      >
        <%= for {label, expires_at} <- expiration_options() do %>
          <option id={ "secret_expires_at_#{expires_at}" } value={expires_at}>
            <%= label %>
          </option>
        <% end %>
      </select>

      <% filtered_errors =
        @changeset.errors
        |> Enum.filter(&(elem(&1, 0) == :expires_at))
        |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

      <.error :for={msg <- filtered_errors}><%= msg %></.error>

      <br />
      <hr />
      <br />

      <div x-data="{ showAdvancedOptions: false }">
        <div x-show="!showAdvancedOptions">
          <div
            class="grid grid-cols-2 text-blue-800 hover:text-blue-500 cursor-pointer"
            @click="showAdvancedOptions = true"
          >
            <div class="text-left">
              Advanced Options
            </div>
            <div class="text-right">
              <.icon name="hero-chevron-up" class="h-5 w-5" />
            </div>
          </div>
        </div>
        <div x-show="showAdvancedOptions">
          <div
            class="grid grid-cols-2 text-blue-800 hover:text-blue-500 cursor-pointer"
            @click="showAdvancedOptions = false"
          >
            <div class="text-left">
              Advanced Options
            </div>
            <div class="text-right">
              <.icon name="hero-chevron-down" class="h-5 w-5" />
            </div>
          </div>

          <br />

          <div class="grid grid-cols-4" x-data="{showInfo: false}">
            <div>
              <.label for="ip_regex">
                IP Regex
                <span
                  class="text-blue-800 hover:text-blue-400 cursor-pointer"
                  @mouseover="showInfo = true"
                  @mouseleave="showInfo = false"
                >
                  <.icon name="hero-information-circle" class="h-5 w-5" />
                </span>
              </.label>
            </div>

            <div
              x-show="showInfo"
              class="-mt-8 px-4 py-2 text-white bg-black absolute text-xs bg-opacity-80"
            >
              If the receiver's IP doesn't match this regex, they won't be able to view the secret. Matches all IPs by default
            </div>

            <div class="text-sm col-span-3">
              <i>
                Use
                <a
                  target="_blank"
                  class="text-blue-600"
                  href="https://regex101.com/"
                >
                  regex101.com
                </a>
                to make sure your regex works as expected
              </i>
            </div>
          </div>

          <.input
            name="secret[ip_regex]"
            id="secret_ip_regex"
            placeholder="Defaults to all IP addresses"
            value={@changeset.changes[:ip_regex]}
          />

          <br />

          <.label for="max_reads">Max Successful Reads</.label>
          <.input
            type="number"
            min="1"
            name="secret[max_reads]"
            id="secret_max_reads"
            placeholder="Defaults to unlimited reads"
            value={@changeset.changes[:max_reads]}
          />

          <br />

          <.label for="max_decryption_attempts">Max Failed Attempts</.label>
          <.input
            type="number"
            min="1"
            name="secret[max_decryption_attempts]"
            id="secret_max_decryption_attempts"
            placeholder="Defaults to unlimited attempts"
            value={@changeset.changes[:max_decryption_attempts]}
          />
        </div>
      </div>

      <br /><br />

      <.button>Create</.button>
    </.form>
  </div>
</div>
