<.form for={@changeset} action={~p"/secrets"}>
  <.label for="title">Title</.label>
  <.input
    name="secret[title]"
    id="secret_title"
    value={@changeset.changes[:title]}
  />

  <% filtered_errors =
    @changeset.errors
    |> Enum.filter(&(elem(&1, 0) == :title))
    |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

  <.error :for={msg <- filtered_errors}><%= msg %></.error>

  <br />

  <div x-data="{ show: false }">
    <div class="grid grid-cols-4">
      <div class="mt-0.5">
        <.label for="encrypted_text">Secret Value</.label>
      </div>

      <div
        class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
        x-show="!show"
        @click="show = true"
      >
        <.icon name="hero-eye" class="h-5 w-5" />
      </div>

      <div
        class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
        x-show="show"
        @click="show = false"
      >
        <.icon name="hero-eye-slash" class="h-5 w-5" />
      </div>
    </div>

    <.input
      type="textarea"
      name="secret[encrypted_text]"
      id="secret_encrypted_text"
      spellcheck="false"
      value={@changeset.changes[:encrypted_text]}
      x-bind:style="!show && 'color: transparent;text-shadow: 0 0 8px rgba(0,0,0,0.5);'"
    />
  </div>

  <% filtered_errors =
    @changeset.errors
    |> Enum.filter(&(elem(&1, 0) == :encrypted_text))
    |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

  <.error :for={msg <- filtered_errors}><%= msg %></.error>

  <br />

  <.label for="encryption_algo">Encryption Algorithm</.label>

  <select
    id="secret_encryption_algo"
    name="secret[encryption_algo]"
    value={@changeset.changes[:encryption_algo]}
    class="mt-1 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm dark:bg-zinc-600"
    x-model="selectedService"
  >
    <option value="">Select Encryption</option>
    <%= for encryption_algo <- Secret.encryption_algos() do %>
      <option
        id={ "secret_encryption_algo_#{encryption_algo}" }
        value={encryption_algo}
      >
        <%= Phoenix.Naming.humanize(encryption_algo) %>
      </option>
    <% end %>
  </select>

  <% filtered_errors =
    @changeset.errors
    |> Enum.filter(&(elem(&1, 0) == :encryption_algo))
    |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

  <.error :for={msg <- filtered_errors}><%= msg %></.error>

  <br />

  <div x-data="{ show: false }">
    <div class="grid grid-cols-4">
      <div class="mt-0.5">
        <.label for="encryption_key">Encryption Key</.label>
      </div>

      <div
        class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
        x-show="!show"
        @click="show = true"
      >
        <.icon name="hero-eye" class="h-5 w-5" />
      </div>

      <div
        class="col-start-6 text-right rounded rounded-xl text-blue-800 hover:text-blue-400 cursor-pointer"
        x-show="show"
        @click="show = false"
      >
        <.icon name="hero-eye-slash" class="h-5 w-5" />
      </div>
    </div>

    <.input
      name="secret[encryption_key]"
      id="secret_encryption_key"
      spellcheck="false"
      value={@changeset.changes[:encryption_key]}
      x-bind:style="!show && 'color: transparent;text-shadow: 0 0 8px rgba(0,0,0,0.5);'"
    />
  </div>

  <br />

  <.label for="expires_at">Expires At</.label>

  <select
    id="secret_expires_at"
    name="secret[expires_at]"
    value={@changeset.changes[:expires_at]}
    class="mt-1 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm dark:bg-zinc-600"
    x-model="selectedService"
  >
    <option value="">Select Expiration</option>
    <%= for {label, expires_at} <- expiration_options() do %>
      <option id={ "secret_expires_at_#{expires_at}" } value={expires_at}>
        <%= label %>
      </option>
    <% end %>
  </select>

  <% filtered_errors =
    @changeset.errors
    |> Enum.filter(&(elem(&1, 0) == :expires_at))
    |> Enum.map(fn {_field, {msg, _}} -> msg end) %>

  <.error :for={msg <- filtered_errors}><%= msg %></.error>

  <br />

  <.button>Create</.button>
</.form>
